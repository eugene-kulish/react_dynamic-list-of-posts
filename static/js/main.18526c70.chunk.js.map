{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","onChoose","selectedPost","choosePost","post","className","map","isSelected","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","postId","setIsError","useState","name","setName","email","setEmail","setBody","isNameError","setIsNameError","isEmailError","setIsEmailError","isCommentError","setIsCommentError","isLoading","setIsLoading","handleOnSubmit","event","preventDefault","comment","length","addComment","newComment","comments","catch","finally","onSubmit","htmlFor","placeholder","value","onChange","target","PostDetails","isError","isComment","setIsComment","useEffect","CommentsServices","deleteComment","commentId","filter","href","UserSelector","selectedUser","users","setUsers","isDropDown","setIsDropDown","handleIsDropDown","selectUser","user","role","cn","App","setSelectedUser","usersPosts","setUsersPosts","setSelectedPost","getPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18526c70.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onChoose: React.Dispatch<React.SetStateAction<Post | null>>;\n  selectedPost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onChoose,\n  selectedPost,\n}) => {\n  const choosePost = (post: Post | null) => () => {\n    onChoose(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const isSelected = (selectedPost?.id === post.id);\n\n            return (\n              <tr\n                data-cy=\"Post\"\n                key={post.id}\n              >\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': !isSelected },\n                    )}\n                    onClick={choosePost(isSelected ? null : post)}\n                  >\n                    {isSelected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { addComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  postId: number;\n  setIsError: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  postId,\n  setIsError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isCommentError, setIsCommentError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setIsNameError(false);\n  };\n\n  const handleEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setIsEmailError(false);\n  };\n\n  const handleNewComment = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n    setIsCommentError(false);\n  };\n\n  const handleOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const comment = {\n      name,\n      email,\n      body,\n      postId,\n    };\n\n    if (!name.length) {\n      setIsNameError(true);\n    }\n\n    if (!email.length) {\n      setIsEmailError(true);\n    }\n\n    if (!body.length) {\n      setIsCommentError(true);\n    }\n\n    if (name.length && email.length && body.length) {\n      setIsLoading(true);\n\n      addComment(comment)\n        .then(newComment => {\n          setComments(comments => (\n            (comments) ? [...comments, newComment] : [newComment]\n          ));\n          setIsError(false);\n          setBody('');\n        })\n        .catch(() => setIsError(true))\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => handleOnSubmit(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={name}\n            onChange={handleName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={email}\n            onChange={handleEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isCommentError },\n            )}\n            value={body}\n            onChange={handleNewComment}\n          />\n        </div>\n\n        {isCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Parameters = {\n  name: string;\n  email: string;\n  body: string;\n  postId: number;\n};\n\nexport const getComments = ({ id }: Post) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (\n  comment: Parameters,\n) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nimport * as CommentsServices from '../api/comments';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isComment, setIsComment] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsError(false);\n    setIsComment(false);\n\n    CommentsServices.getComments(post)\n      .then(setComments)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, [post]);\n\n  const { id, title, body } = post;\n\n  const deleteComment = (commentId: number) => () => {\n    if (comments) {\n      setComments(() => comments.filter(comment => comment.id !== commentId));\n    }\n\n    CommentsServices.deleteComment(commentId)\n      .catch(() => {\n        setIsError(true);\n        setComments(comments);\n      });\n  };\n\n  const onButtonClick = () => {\n    setIsComment(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading && !isError && comments && (!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => {\n                const { name, email } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {name}\n                      </a>\n\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={deleteComment(comment.id)}\n                      />\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          ))}\n\n          {!isComment && !isError && !isLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={onButtonClick}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isComment && (\n          <NewCommentForm\n            setComments={setComments}\n            postId={post.id}\n            setIsError={setIsError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\n\nimport { User } from '../types/User';\nimport { getUsers } from '../api/users';\n\ntype Props = {\n  selectedUser: User | null;\n  onChoose: React.Dispatch<React.SetStateAction<User | null>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({ selectedUser, onChoose }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isDropDown, setIsDropDown] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {});\n  }, []);\n\n  const handleIsDropDown = () => setIsDropDown(!isDropDown);\n\n  const selectUser = (user: User) => () => {\n    handleIsDropDown();\n    onChoose(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleIsDropDown}\n        >\n          <span>\n            {!selectedUser ? 'Choose a user' : selectedUser.name}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isDropDown && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={cn(\n                  'dropdown-item',\n                  { 'is-active': selectedUser?.id === user.id },\n                )}\n                onClick={selectUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getPosts } from './api/posts';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [usersPosts, setUsersPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    setIsError(false);\n\n    if (selectedUser) {\n      setIsLoading(true);\n\n      getPosts(selectedUser)\n        .then(setUsersPosts)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  onChoose={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {!isLoading && !selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {!isLoading && isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoading && !isError && usersPosts && (!usersPosts.length ? (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                ) : (\n                  <PostsList\n                    posts={usersPosts}\n                    onChoose={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (<PostDetails post={selectedPost} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = ({ id }: User) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}